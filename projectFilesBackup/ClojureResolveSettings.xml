<application>
    <component name="ClojureResolveSettings">
        <item key="taoensso.nippy/extend-freeze" resolves-as="clojure.core/defmethod"/>
        <item key="test_helpers/with-continue!-stub" resolves-as="clojure.core/let"/>
        <item key="rapids.testing/branch" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="pia-server.common.controls.core/defcontrol" resolves-as="clojure.core/defn"/>
        <item key="rapids/deflow" resolves-as="clojure.core/defn"/>
        <item key="rapids.deflow/deflow" resolves-as="clojure.core/defn"/>
        <item key="rapids.language.deflow/deflow" resolves-as="clojure.core/defn"/>
        <item key="rapids.language.flow/deflow" resolves-as="clojure.core/defn"/>
        <item key="clojure.core.match/match" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="clojure.test/is" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="rapids.storage.protocol/with-connection" resolves-as="clojure.core/let"/>
        <item key="helpers/with-runtime-env" resolves-as="clojure.core/let"/>
        <item key="test_helpers/with-test-env-run" resolves-as="clojure.core/let"/>
        <item key="pia-server.db.core/with-connection" resolves-as="clojure.core/with-open"/>
        <item key="clojure.tools.macro/macrolet" resolves-as="clojure.core/letfn"/>
        <item key="rapids.language.pool-ops-test/with-env" resolves-as="clojure.core/let"/>
        <item key="clojure.core/defmacro" resolves-as="clojure.core/defmacro"/>
        <item key="rapids.storage/extend-freeze" resolves-as="clojure.core/defmethod"/>
        <item key="rapids.language.test/keys-match" resolves-as="clojure.core/case"/>
        <item key="rapids.storage/extend-thaw" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="rapids.support.defrecordfn/defrecordfn" resolves-as="clojure.core/defrecord"/>
        <item key="rapids/flow" resolves-as="clojure.core/fn"/>
        <item key="rapids.testing/test-flow" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="rapids.defrecordfn/defrecordfn" resolves-as="clojure.core/defrecord"/>
        <item key="rapids.storage.core/extend-freeze" resolves-as="clojure.core/defmethod"/>
        <item key="rapids.language.test/with-test-env" resolves-as="clojure.core/do"/>
        <item key="rapids.language.test/branch" resolves-as="clojure.core/let"/>
        <item key="rapids.util/ifit" resolves-as="clojure.core/let"/>
        <item key="rapids/handle" resolves-as="clojure.core/catch"/>
        <item key="rapids/attempt" resolves-as="clojure.core/try"/>
        <item key="rapids/declare-suspending" resolves-as="clojure.core/declare"/>
        <item key="pia-server.db/with-connection" resolves-as="clojure.core/with-open"/>
        <item key="foo.bar/mymacro" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="pia-server.test/defdbtest" resolves-as="clojure.test/deftest"/>
        <item key="test-helpers/with-test-env-run" resolves-as="clojure.core/let"/>
        <item key="java-time/with-clock" resolves-as="clojure.core/with-open"/>
        <item key="rapids.language.flow/flow" resolves-as="clojure.core/fn"/>
        <item key="taoensso.nippy/extend-thaw" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="rapids.storage.persistence/extend-thaw" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="test_helpers/with-runtime-env" resolves-as="clojure.core/let"/>
        <item key="rapids.storage.core/extend-thaw" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="pia-server.shared.util/range-case" resolves-as="clojure.core/case"/>
        <item key="pia-server.db/with-transaction" resolves-as="clojure.core/with-open"/>
        <item key="honeysql.helpers/defhelper" resolves-as="clojure.core/defn"/>
        <item key="rapids.language.pool-ops-test/with-continue!-stub" resolves-as="clojure.core/let"/>
        <item key="helpers/with-continue!-stub" resolves-as="clojure.core/let"/>
        <item key="potemkin/import-vars" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="rapids.language.pool-ops-test/with-runtime-env" resolves-as="clojure.core/let"/>
        <item key="rapids.storage.persistence/extend-freeze" resolves-as="clojure.core/defmethod"/>
        <item key="clojure.core/cond-&gt;" resolves-as="clojure.core/case"/>
        <item key="foo.bar/defp" resolves-as="cursive.intentions.resolve/resolve-none"/>
        <item key="test_helpers/with-test-env" resolves-as="clojure.core/let"/>
        <item key="rapids/restartable" resolves-as="clojure.core/let"/>
        <item key="rapids.runlet/with-run" resolves-as="clojure.core/let"/>
        <item key="rapids.storage.core/with-storage" resolves-as="clojure.core/let"/>
    </component>
</application>